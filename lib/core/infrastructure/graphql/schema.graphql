"""
The `@defer` directive may be provided for fragment spreads and inline fragments
to inform the executor to delay the execution of the current fragment to
indicate deprioritization of the current fragment. A query with `@defer`
directive will cause the request to potentially return multiple responses, where
non-deferred data is delivered in the initial response and data deferred is
delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to
  the result of this defer directive. This label is intended to give client
  applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """
  Deferred when true.
  """
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the
backend can leverage technology such as asynchronous iterators to provide a
partial list in the initial response, and additional list items in subsequent
responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to
  the result of this stream directive. This label is intended to give client
  applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """
  The initial elements that shall be send down to the consumer.
  """
  initialCount: Int!

  """
  Streamed when true.
  """
  if: Boolean!
) on FIELD

directive @authorize(
  """
  The name of the authorization policy that determines access to the annotated resource.
  """
  policy: String

  """
  Roles that are allowed to access the annotated resource.
  """
  roles: [String!]

  """
  Defines when when the resolver shall be executed.By default the resolver is
  executed after the policy has determined that the current user is allowed to
  access the field.
  """
  apply: ApplyPolicy! = BEFORE_RESOLVER
) on SCHEMA | OBJECT | FIELD_DEFINITION

"""
The `@specifiedBy` directive is used within the type system definition language
to provide a URL for specifying the behavior of custom scalar definitions.
"""
directive @specifiedBy(
  """
  The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types.
  """
  url: String!
) on SCALAR

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime

type LinkTextToken implements TextToken {
  url: Url!
  text: String!
}

type MentionTextToken implements TextToken {
  authorId: Uuid!
  text: String!
}

type Mutation {
  createPost(input: PostInput!): PostOperationResult!
  editPost(postId: Uuid!, input: PostInput!): PostOperationResult!
}

type OperationFailureResult {
  code: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type PlainTextToken implements TextToken {
  text: String!
}

type Post {
  authorId: Uuid!
  creationTime: DateTime!
  lastModificationTime: DateTime
  author: PostAuthor!
  currentVersion: PostVersion!
  previousVersions: [PostVersion!]!
  id: Uuid!
}

type PostAuthor {
  username: String!
  id: Uuid!
}

union PostAuthorOperationResult =
    OperationFailureResult
  | PostAuthorOperationSuccessResult

type PostAuthorOperationSuccessResult {
  result: PostAuthor!
}

"""
A connection to a list of items.
"""
type PostConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PostEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Post!]
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Post!
}

input PostInput {
  text: String!
}

union PostOperationResult = OperationFailureResult | PostOperationSuccessResult

type PostOperationSuccessResult {
  result: Post!
}

type PostVersion {
  text: String!
  creationTime: DateTime!
  textTokens: [TextToken!]!
}

type Query {
  posts(first: Int, after: String, last: Int, before: String): PostConnection
  post(id: Uuid!): Post
}

interface TextToken {
  text: String!
}

scalar Url

scalar Uuid
