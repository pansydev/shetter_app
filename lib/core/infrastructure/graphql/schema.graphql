"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """
  Deferred when true.
  """
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """
  The initial elements that shall be send down to the consumer.
  """
  initialCount: Int!

  """
  Streamed when true.
  """
  if: Boolean!
) on FIELD

directive @authorize(
  """
  The name of the authorization policy that determines access to the annotated resource.
  """
  policy: String

  """
  Roles that are allowed to access the annotated resource.
  """
  roles: [String!]

  """
  Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field.
  """
  apply: ApplyPolicy! = BEFORE_RESOLVER
) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION

type OperationFailureResult {
  code: String!
  success: Boolean!
}

type OperationSuccessResult {
  success: Boolean!
}

union OperationResult = OperationFailureResult | OperationSuccessResult

type PostVersion {
  originalText: String!
  creationTime: DateTime!
  textTokens: [TextToken!]!
  images: [PostImage!]!
}

type PostLike {
  authorId: UUID!
  author: PostAuthor!
}

input EditPostInput {
  text: String
  images: [PostImageInput!]
}

input CreatePostInput {
  text: String
  images: [Upload!]
}

input PostImageInput {
  id: UUID
  file: Upload
}

union PostOperationResult = OperationFailureResult | PostOperationSuccessResult

type PostOperationSuccessResult {
  result: Post!
  success: Boolean!
}

union PostAuthorOperationResult =
    OperationFailureResult
  | PostAuthorOperationSuccessResult

type PostAuthorOperationSuccessResult {
  result: PostAuthor!
  success: Boolean!
}

interface TextToken {
  text: String!
}

type PlainTextToken implements TextToken {
  modifiers: [TextTokenModifier!]!
  text: String!
}

type LinkTextToken implements TextToken {
  url: URL!
  text: String!
}

type MentionTextToken implements TextToken {
  authorId: UUID!
  text: String!
}

type Query {
  posts(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): PostConnection
  post(id: UUID!): Post
  author(id: UUID!): PostAuthor
}

type Mutation {
  createPost(input: CreatePostInput!): PostOperationResult!
  editPost(postId: UUID!, input: EditPostInput!): PostOperationResult!
  likePost(postId: UUID!): OperationResult!
  dislikePost(postId: UUID!): OperationResult!
}

type Subscription {
  postCreated: Post!
  postEdited: Post!
}

type Post {
  previousVersions(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): PostVersionConnection
  likes(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): PostLikeConnection
  authorId: UUID!
  creationTime: DateTime!
  lastModificationTime: DateTime
  author: PostAuthor!
  currentVersion: PostVersion!
  isLiked: Boolean!
  id: UUID!
}

type PostAuthor {
  posts(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): PostConnection
  username: String!
  id: UUID!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

"""
A connection to a list of items.
"""
type PostVersionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PostVersionEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [PostVersion!]
  totalCount: Int!
}

"""
A connection to a list of items.
"""
type PostLikeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PostLikeEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [PostLike!]
  totalCount: Int!
}

"""
A connection to a list of items.
"""
type PostConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PostEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Post!]
  totalCount: Int!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
An edge in a connection.
"""
type PostVersionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PostVersion!
}

"""
An edge in a connection.
"""
type PostLikeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PostLike!
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Post!
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime

type PostImage {
  id: UUID!
  url: URL!
  blurHash: String!
}

scalar UUID

enum TextTokenModifier {
  BOLD
  ITALIC
  UNDERLINE
  STRIKETHROUGH
  CODE
}

scalar URL
